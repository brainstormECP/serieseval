/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package serieseval.forms.Resultados;

import java.awt.BorderLayout;
import java.awt.Container;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.Vector;
import javax.swing.DefaultCellEditor;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import javax.swing.table.TableModel;
import serieseval.ProcessArff;
import serieseval.controller.AlgorithmController;
import serieseval.controller.ExperimentController;
import serieseval.controller.UserController;
import serieseval.forms.algorithms.*;
import serieseval.model.Algorithm;
import serieseval.model.Datasource;
import serieseval.model.Dmresult;
import serieseval.model.Experimentgroup;
import serieseval.model.Testoption;
import serieseval.model.User;
import weka.gui.sql.ResultSetTableModel;

/**
 *
 * @author Laura
 */
public class ResultsForm extends javax.swing.JPanel {

    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    Experimentgroup experiment;

    /**
     * Creates new form Usuarios
     */
    public ResultsForm(Experimentgroup experiment) {
        initComponents();
        this.experiment = experiment;
        Collection<Datasource> datasources = experiment.getDatasourceCollection();
        List<Dmresult> allResults = new ArrayList<>();
        for (Datasource datasource : datasources) {
            allResults.addAll(datasource.getDmresultCollection());
        }

        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();
        org.jdesktop.swingbinding.JTableBinding jTableBinding = org.jdesktop.swingbinding.SwingBindings.createJTableBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, allResults, resultadosTable);
        org.jdesktop.swingbinding.JTableBinding.ColumnBinding columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${datasource}"));
        columnBinding.setColumnName("datasource");
        columnBinding.setColumnClass(Datasource.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${algorithm}"));
        columnBinding.setColumnName("algorithm");
        columnBinding.setColumnClass(Algorithm.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${testoption}"));
        columnBinding.setColumnName("testoption");
        columnBinding.setColumnClass(Testoption.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${testoptionparam}"));
        columnBinding.setColumnName("testoptionparam");
        columnBinding.setColumnClass(Integer.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${correlationCoefficient}"));
        columnBinding.setColumnName("correlationCoefficient");
        columnBinding.setColumnClass(Double.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${meanAbsoluteError}"));
        columnBinding.setColumnName("meanAbsoluteError");
        columnBinding.setColumnClass(Double.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${rootMeanSquaredError}"));
        columnBinding.setColumnName("rootMeanSquaredError");
        columnBinding.setColumnClass(Double.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${relativeAbsoluteError}"));
        columnBinding.setColumnName("relativeAbsoluteError");
        columnBinding.setColumnClass(Double.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${rootRelativeSquareError}"));
        columnBinding.setColumnName("rootRelativeSquareError");
        columnBinding.setColumnClass(Double.class);

        jTableBinding.setSourceUnreadableValue(null);
        bindingGroup.addBinding(jTableBinding);
        jTableBinding.bind();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        seriesevalPUEntityManager = java.beans.Beans.isDesignTime() ? null : javax.persistence.Persistence.createEntityManagerFactory("seriesevalPU").createEntityManager();
        algorithmQuery = java.beans.Beans.isDesignTime() ? null : seriesevalPUEntityManager.createQuery("SELECT a FROM Algorithm a");
        algorithmList = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : algorithmQuery.getResultList();
        experimentgroupQuery = java.beans.Beans.isDesignTime() ? null : seriesevalPUEntityManager.createQuery("SELECT e FROM Experimentgroup e");
        experimentgroupList = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : experimentgroupQuery.getResultList();
        jScrollPane1 = new javax.swing.JScrollPane();
        resultadosTable = new javax.swing.JTable();
        ejecutarAnalisisBtn = new javax.swing.JButton();
        atrasBtn = new javax.swing.JButton();
        verGaficoBtn = new javax.swing.JButton();
        mejorResultadoBtn = new javax.swing.JButton();

        resultadosTable.setColumnSelectionAllowed(true);
        resultadosTable.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jScrollPane1.setViewportView(resultadosTable);
        resultadosTable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        ejecutarAnalisisBtn.setText("Ejecutar análisis");
        ejecutarAnalisisBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ejecutarAnalisisBtnActionPerformed(evt);
            }
        });

        atrasBtn.setText("Atrás");
        atrasBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                atrasBtnActionPerformed(evt);
            }
        });

        verGaficoBtn.setText("Ver gráfico");
        verGaficoBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                verGaficoBtnActionPerformed(evt);
            }
        });

        mejorResultadoBtn.setText("Mejor resultado");
        mejorResultadoBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mejorResultadoBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 704, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addComponent(ejecutarAnalisisBtn)
                        .addGap(18, 18, 18)
                        .addComponent(verGaficoBtn)
                        .addGap(18, 18, 18)
                        .addComponent(mejorResultadoBtn)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(atrasBtn)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ejecutarAnalisisBtn)
                    .addComponent(verGaficoBtn)
                    .addComponent(mejorResultadoBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 304, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(atrasBtn)
                .addGap(19, 19, 19))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void ejecutarAnalisisBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ejecutarAnalisisBtnActionPerformed
        // TODO add your handling code here:
        Integer selected = resultadosTable.getSelectedRow();
        //resultadosTable.get
        if (selected >= 0) {           
            Collection<Datasource> datasources = experiment.getDatasourceCollection();
            List<Dmresult> allResults = new ArrayList<>();
            for (Datasource datasource : datasources) {
                allResults.addAll(datasource.getDmresultCollection());
            }
            AnalisisGraphForm u = new AnalisisGraphForm(allResults.get(selected));
            u.setVisible(true);
            Container c = this.getParent();
            c.removeAll();
            c.setLayout(new BorderLayout());
            c.add(u);
            c.setSize(300, 300);
            c.revalidate();
            c.repaint();
        } else {
            JOptionPane.showMessageDialog(null, "Debe seleccionar un Resultado para usarlo en la predicción.");
        }

    }//GEN-LAST:event_ejecutarAnalisisBtnActionPerformed

    private void verGaficoBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_verGaficoBtnActionPerformed
        // TODO add your handling code here:
        ResultsGraphForm u = new ResultsGraphForm(experiment);
        u.setVisible(true);
        Container c = this.getParent();
        c.removeAll();
        c.setLayout(new BorderLayout());
        c.add(u);
        c.setSize(300, 300);
        c.revalidate();
        c.repaint();
    }//GEN-LAST:event_verGaficoBtnActionPerformed

    private void atrasBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_atrasBtnActionPerformed
        // TODO add your handling code here:
        ExperimentForm u = new ExperimentForm();
        u.setVisible(true);
        Container c = this.getParent();
        c.removeAll();
        c.setLayout(new BorderLayout());
        c.add(u);
        c.setSize(300, 300);
        c.revalidate();
        c.repaint();
    }//GEN-LAST:event_atrasBtnActionPerformed

    private void mejorResultadoBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mejorResultadoBtnActionPerformed
        Integer selected = resultadosTable.getSelectedRow();
        //resultadosTable.get
        if (selected >= 0) {           
            Collection<Datasource> datasources = experiment.getDatasourceCollection();
            List<Dmresult> allResults = new ArrayList<>();
            for (Datasource datasource : datasources) {
                allResults.addAll(datasource.getDmresultCollection());
            }
            ExperimentController ec = new ExperimentController();
            ec.SetMejorResultado(experiment, allResults.get(selected));
            JOptionPane.showMessageDialog(null, "Se ha especificado correctamente el mejor resultado.");            
        } else {
            JOptionPane.showMessageDialog(null, "Debe seleccionar un Resultado para usarlo en la predicción.");
        }
    }//GEN-LAST:event_mejorResultadoBtnActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private java.util.List<serieseval.model.Algorithm> algorithmList;
    private javax.persistence.Query algorithmQuery;
    private javax.swing.JButton atrasBtn;
    private javax.swing.JButton ejecutarAnalisisBtn;
    private java.util.List<serieseval.model.Experimentgroup> experimentgroupList;
    private javax.persistence.Query experimentgroupQuery;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton mejorResultadoBtn;
    private javax.swing.JTable resultadosTable;
    private javax.persistence.EntityManager seriesevalPUEntityManager;
    private javax.swing.JButton verGaficoBtn;
    // End of variables declaration//GEN-END:variables

    public void persist(Object object) {
        seriesevalPUEntityManager.getTransaction().begin();
        try {
            seriesevalPUEntityManager.persist(object);
            seriesevalPUEntityManager.getTransaction().commit();
        } catch (Exception e) {
            e.printStackTrace();
            seriesevalPUEntityManager.getTransaction().rollback();
        } finally {
            seriesevalPUEntityManager.close();
        }
    }
}
