/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package serieseval.forms.Resultados;

import java.awt.BorderLayout;
import java.awt.Container;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import javax.swing.DefaultCellEditor;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.table.TableColumn;
import javax.swing.table.TableModel;
import serieseval.Seguridad;
import serieseval.controller.AlgorithmController;
import serieseval.controller.ExperimentController;
import serieseval.controller.UserController;
import serieseval.forms.algorithms.*;
import serieseval.model.Algorithm;
import serieseval.model.Datasource;
import serieseval.model.Dmresult;
import serieseval.model.Experimentgroup;
import serieseval.model.User;

/**
 *
 * @author Laura
 */
public class ExperimentForm extends javax.swing.JPanel {

    /**
     * Creates new form Usuarios
     */
    public ExperimentForm() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        seriesevalPUEntityManager = java.beans.Beans.isDesignTime() ? null : javax.persistence.Persistence.createEntityManagerFactory("seriesevalPU").createEntityManager();
        algorithmQuery = java.beans.Beans.isDesignTime() ? null : seriesevalPUEntityManager.createQuery("SELECT a FROM Algorithm a");
        algorithmList = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : algorithmQuery.getResultList();
        experimentgroupQuery = java.beans.Beans.isDesignTime() ? null : seriesevalPUEntityManager.createQuery("SELECT e FROM Experimentgroup e");
        experimentgroupList = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : experimentgroupQuery.getResultList();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        resultadosBtn = new javax.swing.JButton();

        jTable1.setColumnSelectionAllowed(true);
        jTable1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        org.jdesktop.swingbinding.JTableBinding jTableBinding = org.jdesktop.swingbinding.SwingBindings.createJTableBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, experimentgroupList, jTable1);
        org.jdesktop.swingbinding.JTableBinding.ColumnBinding columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${description}"));
        columnBinding.setColumnName("Description");
        columnBinding.setColumnClass(String.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${fecha}"));
        columnBinding.setColumnName("Fecha");
        columnBinding.setColumnClass(java.util.Date.class);
        jTableBinding.setSourceUnreadableValue(null);
        bindingGroup.addBinding(jTableBinding);
        jTableBinding.bind();
        jScrollPane1.setViewportView(jTable1);
        jTable1.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        resultadosBtn.setText("Mostrar resultados");
        resultadosBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resultadosBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 439, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(resultadosBtn))
                .addContainerGap(31, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(resultadosBtn)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        bindingGroup.bind();
    }// </editor-fold>//GEN-END:initComponents

    private void resultadosBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resultadosBtnActionPerformed
        // TODO add your handling code here:
        Integer selected = jTable1.getSelectedRow();
        if (selected >= 0) {
            if (Seguridad.UsuarioActual().getIdRole().getRoleName().equals("Usuario")) {
                Experimentgroup selectedExperiment = experimentgroupList.get(selected);
                if (selectedExperiment.getResultseleccionado() != null) {
                    AnalisisGraphForm u = new AnalisisGraphForm(selectedExperiment.getResultseleccionado());
                    u.setVisible(true);
                    Container c = this.getParent();
                    c.removeAll();
                    c.setLayout(new BorderLayout());
                    c.add(u);
                    c.setSize(300, 300);
                    c.revalidate();
                    c.repaint();
                } else {
                    JOptionPane.showMessageDialog(null, "Al experimento seleccionado un experto no ha definido el mejor resultado.");
                }

            } else {
                Experimentgroup selectedExperiment = experimentgroupList.get(selected);
                ResultsForm u = new ResultsForm(selectedExperiment);
                u.setVisible(true);
                Container c = this.getParent();
                c.removeAll();
                c.setLayout(new BorderLayout());
                c.add(u);
                c.setSize(300, 300);
                c.revalidate();
                c.repaint();
            }
        } else {
            JOptionPane.showMessageDialog(null, "Debe seleccionar un Experimento para mostrar sus resultados.");
        }

    }//GEN-LAST:event_resultadosBtnActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private java.util.List<serieseval.model.Algorithm> algorithmList;
    private javax.persistence.Query algorithmQuery;
    private java.util.List<serieseval.model.Experimentgroup> experimentgroupList;
    private javax.persistence.Query experimentgroupQuery;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JButton resultadosBtn;
    private javax.persistence.EntityManager seriesevalPUEntityManager;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables

    public void persist(Object object) {
        seriesevalPUEntityManager.getTransaction().begin();
        try {
            seriesevalPUEntityManager.persist(object);
            seriesevalPUEntityManager.getTransaction().commit();
        } catch (Exception e) {
            e.printStackTrace();
            seriesevalPUEntityManager.getTransaction().rollback();
        } finally {
            seriesevalPUEntityManager.close();
        }
    }
}
